import os
import asyncio
import traceback
import sys
import requests # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å Supabase
from flask import Flask, request
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot, error
from supabase import create_client, Client # Supabase –∫–ª–∏–µ–Ω—Ç –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —á—Ç–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# --- –ù–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ß–ï–†–ï–ó REQUESTS ---
def save_user_sync_requests(supabase_url, supabase_key, user_id: int):
    """–°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP-–∑–∞–ø—Ä–æ—Å."""
    try:
        url = f"{supabase_url}/rest/v1/users"
        headers = {
            "apikey": supabase_key,
            "Authorization": f"Bearer {supabase_key}",
            "Content-Type": "application/json",
            "Prefer": "resolution=merge-duplicates"
        }
        data = { "chat_id": user_id }
        response = requests.post(url, headers=headers, json=data, timeout=5)
        
        if 200 <= response.status_code < 300:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ HTTP.")
        else:
            print(f"!!! –û–®–ò–ë–ö–ê HTTP: –°—Ç–∞—Ç—É—Å {response.status_code}, –¢–µ–ª–æ: {response.text}")

    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ HTTP-–∑–∞–ø—Ä–æ—Å–µ –∫ Supabase: {e}")
        print(traceback.format_exc())

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def handle_start_async(bot, supabase_url, supabase_key, update: Update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start: —Å–Ω–∞—á–∞–ª–∞ –±–∞–∑–∞, –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç."""
    user_id = update.message.chat_id
    save_user_sync_requests(supabase_url, supabase_key, user_id)
    
    keyboard = [
        [KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", web_app=WebAppInfo(url="https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"))],
        [KeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url="https://baza-znaniy-app.vercel.app/"))],
        [KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url="https://docs.google.com/forms/d/e/1FAIpQLSedAPNqKkoJxer4lISLVsQgmu6QpPagoWreyvYOz7DbFuanFw/viewform?usp=header"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **–î–∞—à–±–æ—Ä–¥** —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.\n\n"
        "–ê —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def handle_admin_command_async(bot, supabase_url, supabase_key, update: Update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (/stats, /broadcast)."""
    text_parts = update.message.text.split(' ', 1)
    command = text_parts[0]
    admin_id = update.message.chat_id
    
    # –î–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç, –æ–Ω –æ–±—ã—á–Ω–æ –Ω–∞–¥–µ–∂–Ω–µ–µ
    supabase_client: Client = create_client(supabase_url, supabase_key)

    if command == '/broadcast' and len(text_parts) > 1:
        message_to_send = text_parts[1]
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        user_ids = []
        try:
            response = supabase_client.table('users').select('chat_id').execute()
            user_ids = [item['chat_id'] for item in response.data]
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return

        success_count = 0
        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id, text=message_to_send, parse_mode='Markdown')
                success_count += 1
                await asyncio.sleep(0.05)
            except error.Forbidden:
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å DELETE-–∑–∞–ø—Ä–æ—Å
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            except error.TelegramError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}: {e}")
        
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(user_ids)}.")

    elif command == '/stats':
        try:
            response = supabase_client.table('users').select('chat_id', count='exact').execute()
            await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {response.count}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n`/broadcast <—Ç–µ–∫—Å—Ç>`\n`/stats`",
            parse_mode='Markdown'
        )

# === –ì–õ–ê–í–ù–´–ô –í–ï–ë–•–£–ö ===
@app.route('/', methods=['POST'])
def webhook():
    try:
        BOT_TOKEN = os.environ['BOT_TOKEN']
        SUPABASE_URL = os.environ['SUPABASE_URL']
        SUPABASE_KEY = os.environ['SUPABASE_KEY']
        ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
        ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]

        bot = Bot(token=BOT_TOKEN)
        
        update_data = request.get_json()
        update = Update.de_json(update_data, bot)
        
        if update.message and update.message.text:
            text = update.message.text
            user_id = update.message.chat_id
            
            if text == '/start':
                asyncio.run(handle_start_async(bot, SUPABASE_URL, SUPABASE_KEY, update))
            elif text.startswith('/') and user_id in ADMIN_IDS:
                asyncio.run(handle_admin_command_async(bot, SUPABASE_URL, SUPABASE_KEY, update))

    except Exception as e:
        print(f"--- !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –í–ï–ë–•–£–ö–ï !!! ---")
        print(traceback.format_exc())
            
    return 'ok', 200
