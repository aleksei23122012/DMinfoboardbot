import os
import asyncio
import traceback # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
from flask import Flask, request
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot, error
from supabase import create_client, Client

# --- –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤–æ–æ–±—â–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è ---
print("--- –°–∫—Ä–∏–ø—Ç api/index.py –∑–∞–ø—É—â–µ–Ω ---")

try:
    # === –ù–ê–°–¢–†–û–ô–ö–ò: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel ===
    BOT_TOKEN = os.environ.get('BOT_TOKEN')
    SUPABASE_URL = os.environ.get('SUPABASE_URL')
    SUPABASE_KEY = os.environ.get('SUPABASE_KEY')
    ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')

    # --- –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
    print(f"BOT_TOKEN –Ω–∞–π–¥–µ–Ω: {'–î–∞' if BOT_TOKEN else '–ù–µ—Ç'}")
    print(f"SUPABASE_URL –Ω–∞–π–¥–µ–Ω: {'–î–∞' if SUPABASE_URL else '–ù–µ—Ç'}")
    print(f"SUPABASE_KEY –Ω–∞–π–¥–µ–Ω: {'–î–∞' if SUPABASE_KEY else '–ù–µ—Ç'}")
    print(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ADMIN_IDS: '{ADMIN_IDS_STR}'")

    # --- –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ ID —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫ ---
    ADMIN_IDS = []
    if ADMIN_IDS_STR:
        try:
            # –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã.
            ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]
            print(f"–°–ø–∏—Å–æ–∫ ADMIN_IDS —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {ADMIN_IDS}")
        except ValueError as e:
            print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ADMIN_IDS –≤ —á–∏—Å–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏! –û—à–∏–±–∫–∞: {e}")
            ADMIN_IDS = [] # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç—ã–º

    # === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    bot = Bot(token=BOT_TOKEN)
    app = Flask(__name__)
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("--- –ö–ª–∏–µ–Ω—Ç—ã Bot –∏ Supabase —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã ---")

except Exception as e:
    # –≠—Ç–∞ –ª–æ–≤—É—à–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –∫–ª—é—á–µ–π)
    print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò: {e}")
    traceback.print_exc()


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def save_user_async(user_id: int):
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    try:
        await asyncio.to_thread(
            supabase.table('users').upsert,
            {'chat_id': user_id},
            on_conflict='chat_id'
        )
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ Supabase: {e}")
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ async —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
async def get_all_user_ids_async() -> list[int]:
    try:
        response = await asyncio.to_thread(
            supabase.table('users').select('chat_id').execute
        )
        user_ids = [item['chat_id'] for item in response.data]
        return user_ids
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase: {e}")
        return []

async def remove_user_async(user_id: int):
    try:
        await asyncio.to_thread(
            supabase.table('users').delete().eq('chat_id', user_id).execute
        )
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã, —Ç–∞–∫ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
async def handle_start_async(update: Update):
    user_id = update.message.chat_id
    await save_user_async(user_id)
    keyboard = [
        [KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", web_app=WebAppInfo(url="https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"))],
        [KeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url="https://baza-znaniy-app.vercel.app/"))],
        [KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url="https://docs.google.com/forms/d/e/1FAIpQLSedAPNqKkoJxer4lISLVsQgmu6QpPagoWreyvYOz7DbFuanFw/viewform?usp=header"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **–î–∞—à–±–æ—Ä–¥** —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.\n\n"
        "–ê —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def broadcast_message_async(message_text: str):
    user_ids = await get_all_user_ids_async()
    print(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    for user_id in user_ids:
        try:
            await bot.send_message(chat_id=user_id, text=message_text, parse_mode='Markdown')
            await asyncio.sleep(0.1)
        except error.Forbidden:
            await remove_user_async(user_id)
        except error.TelegramError as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def handle_admin_command_async(update: Update):
    if update.message.chat_id not in ADMIN_IDS:
        return
    text_parts = update.message.text.split(' ', 1)
    command = text_parts[0]
    if command == '/broadcast' and len(text_parts) > 1:
        message_to_send = text_parts[1]
        await update.message.reply_text("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        await broadcast_message_async(message_to_send)
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    elif command == '/stats':
        user_ids = await get_all_user_ids_async()
        await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {len(user_ids)}")
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "`/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>`\n"
            "`/stats`",
            parse_mode='Markdown'
        )

# --- –ì–õ–ê–í–ù–´–ô –í–ï–ë–•–£–ö –î–õ–Ø VERCEL ---
@app.route('/', methods=['POST'])
def webhook():
    # --- –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–í–û–î: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ–±—Ö—É–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è ---
    print("--- –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –≤ /webhook ---")
    try:
        update_data = request.get_json()
        if update_data:
            update = Update.de_json(update_data, bot)
            if update.message and update.message.text:
                text = update.message.text
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.message.chat_id}")
                if text == '/start':
                    asyncio.run(handle_start_async(update))
                elif text.startswith('/'):
                    asyncio.run(handle_admin_command_async(update))
    except Exception as e:
        # –≠—Ç–∞ –ª–æ–≤—É—à–∫–∞ –ø–æ–π–º–∞–µ—Ç –ª—é–±—É—é –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä–∏ –≤–µ–±—Ö—É–∫–∞
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò –í–ï–ë–•–£–ö–ê: {e}")
        traceback.print_exc() # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—É—é —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –æ—à–∏–±–∫–∏
        
    return 'ok', 200
