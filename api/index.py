import os
import asyncio
import traceback
import sys
from flask import Flask, request
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot, error
from supabase import create_client, Client

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# === –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def save_user_async(supabase_client, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞)."""
    try:
        print(f"--- [DB] –ü–æ–ø—ã—Ç–∫–∞ INSERT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. ---")
        sys.stdout.flush() # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å –ª–æ–≥–∞

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π INSERT. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–π–º–∞–µ–º.
        await asyncio.to_thread(supabase_client.table('users').insert, {'chat_id': user_id})
        
        print(f"--- [DB] –£–°–ü–ï–•: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É. ---")
        sys.stdout.flush()
    except Exception as e:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
        if 'duplicate key value violates unique constraint' in str(e):
            print(f"--- [DB] –ò–ù–§–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ. ---")
        else:
            # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—É—é –¥—Ä—É–≥—É—é, –Ω–∞—Å—Ç–æ—è—â—É—é –æ—à–∏–±–∫—É
            print(f"--- [DB] !!! –û–®–ò–ë–ö–ê –ø—Ä–∏ INSERT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e} !!! ---")
            print(traceback.format_exc())
        sys.stdout.flush()

async def handle_start_async(bot, supabase_client, update: Update):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –æ–ø–µ—Ä–∞—Ü–∏–π."""
    user_id = update.message.chat_id
    print(f"--- [HANDLER] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start –¥–ª—è {user_id}. ---")
    sys.stdout.flush()

    # --- –®–ê–ì 1: –°–ù–ê–ß–ê–õ–ê –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ ---
    # –ú—ã –Ω–µ –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ, –ø–æ–∫–∞ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
    await save_user_async(supabase_client, user_id)
    
    print(f"--- [HANDLER] –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç... ---")
    sys.stdout.flush()

    # --- –®–ê–ì 2: –ü–û–¢–û–ú –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–¢–í–ï–¢ ---
    keyboard = [
        [KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", web_app=WebAppInfo(url="https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"))],
        [KeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url="https://baza-znaniy-app.vercel.app/"))],
        [KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url="https://docs.google.com/forms/d/e/1FAIpQLSedAPNqKkoJxer4lISLVsQgmu6QpPagoWreyvYOz7DbFuanFw/viewform?usp=header"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä (db_first_test)",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    print(f"--- [HANDLER] –û—Ç–≤–µ—Ç –¥–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. ---")
    sys.stdout.flush()

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥, –≤–∫–ª—é—á–∞—è handle_admin_command_async –∏ webhook, –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º)
async def handle_admin_command_async(bot, supabase_client, update: Update):
    # ...
    pass

@app.route('/', methods=['POST'])
def webhook():
    try:
        BOT_TOKEN = os.environ['BOT_TOKEN']
        SUPABASE_URL = os.environ['SUPABASE_URL']
        SUPABASE_KEY = os.environ['SUPABASE_KEY']
        ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
        ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]

        bot = Bot(token=BOT_TOKEN)
        supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        
        update_data = request.get_json()
        update = Update.de_json(update_data, bot)
        
        if update.message and update.message.text:
            text = update.message.text
            user_id = update.message.chat_id
            
            if text == '/start':
                asyncio.run(handle_start_async(bot, supabase, update))
            elif text.startswith('/') and user_id in ADMIN_IDS:
                # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏–º –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∞
                pass

    except Exception as e:
        print(f"--- !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –í–ï–ë–•–£–ö–ï !!! ---")
        print(traceback.format_exc())
            
    return 'ok', 200
