import os
import asyncio
import traceback
import psycopg2 # –ù–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è Postgres
from flask import Flask, request
from telegram import Update, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, Bot, error

# === –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–∏–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
app = Flask(__name__)

# --- –ù–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –í VERCEL POSTGRES ---
def save_user_sync_postgres(postgres_url, user_id: int, username: str):
    """–°–ò–ù–•–†–û–ù–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Vercel Postgres."""
    try:
        # ON CONFLICT (chat_id) DO UPDATE... - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ "upsert" –¥–ª—è Postgres
        sql = """
        INSERT INTO users (chat_id, username)
        VALUES (%s, %s)
        ON CONFLICT (chat_id) DO UPDATE SET
        username = EXCLUDED.username;
        """
        conn = psycopg2.connect(postgres_url)
        cur = conn.cursor()
        cur.execute(sql, (user_id, username))
        conn.commit()
        cur.close()
        conn.close()
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Vercel Postgres.")
    except Exception as e:
        print(f"--- !!! –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Postgres: {e} !!! ---")
        print(traceback.format_exc())

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def handle_start_async(bot, postgres_url, update: Update):
    user = update.message.from_user
    user_id = user.id
    username = user.username if user.username else ""
    
    save_user_sync_postgres(postgres_url, user_id, username)
    
    keyboard = [
        [KeyboardButton("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π", web_app=WebAppInfo(url="https://aleksei23122012.teamly.ru/space/00647e86-cd4b-46ef-9903-0af63964ad43/article/17e16e2a-92ff-463c-8bf4-eaaf202c0bc7"))],
        [KeyboardButton("–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–π", web_app=WebAppInfo(url="https://baza-znaniy-app.vercel.app/"))],
        [KeyboardButton("–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", web_app=WebAppInfo(url="https://docs.google.com/forms/d/e/1FAIpQLSedAPNqKkoJxer4lISLVsQgmu6QpPagoWreyvYOz7DbFuanFw/viewform?usp=header"))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üòä\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É **–î–∞—à–±–æ—Ä–¥** —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞.\n\n"
        "–ê —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –¥—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

# ... (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥, –ø–æ–∫–∞ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫)
async def handle_admin_command_async(bot, postgres_url, update: Update):
    # –î–æ–±–∞–≤–∏–º —Å—é–¥–∞ –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
    text_parts = update.message.text.split(' ', 1)
    command = text_parts[0]
    admin_id = update.message.chat_id

    if command == '/stats':
        try:
            conn = psycopg2.connect(postgres_url)
            cur = conn.cursor()
            cur.execute("SELECT COUNT(*) FROM users;")
            count = cur.fetchone()[0]
            cur.close()
            conn.close()
            await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: {count}")
        except Exception as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    else:
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞.")


# === –ì–õ–ê–í–ù–´–ô –í–ï–ë–•–£–ö ===
@app.route('/', methods=['POST'])
def webhook():
    try:
        BOT_TOKEN = os.environ['BOT_TOKEN']
        POSTGRES_URL = os.environ['POSTGRES_URL'] # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        ADMIN_IDS_STR = os.environ.get('ADMIN_IDS', '')
        ADMIN_IDS = [int(admin_id) for admin_id in ADMIN_IDS_STR.split(',') if admin_id.strip()]

        bot = Bot(token=BOT_TOKEN)
        update_data = request.get_json()
        update = Update.de_json(update_data, bot)
        
        if update.message and update.message.text:
            text = update.message.text
            user_id = update.message.chat_id

            if text == '/start':
                asyncio.run(handle_start_async(bot, POSTGRES_URL, update))
            elif text.startswith('/') and user_id in ADMIN_IDS:
                asyncio.run(handle_admin_command_async(bot, POSTGRES_URL, update))

    except Exception as e:
        print(f"--- !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –í–ï–ë–•–£–ö–ï !!! ---")
        print(traceback.format_exc())
            
    return 'ok', 200
